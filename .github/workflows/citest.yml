name: CI Test

on: [push]

jobs:
  citest:
    runs-on: [self-hosted, linux, v2]
    steps:
      - name: checkout
        uses: actions/checkout@v2.4.0
      - name: Cancel Previous Runs
        uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Setup Maven
        uses: stCarolas/setup-maven@v4.2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 'lts/*'
          check-latest: true
      - name: Update NPM
        run: npm i -g npm
      - name: Prepare UI Tests
        uses: cytechmobile/setup-cypress-deps@v1
      - name: build-backend
        working-directory: ./backend
        run: mvn verify
      - name: build-frontend
        working-directory: ./ui
        run: npm install && npm run lint
      - name: Start Test DB
        # start a db, find its id and ip and set them to the github env, to make them available to next steps
        run: |
          DBID=$(docker run -d -e POSTGRES_USER=events -e POSTGRES_PASSWORD=events -e POSTGRES_DB=events postgres:alpine -c fsync=off -c synchronous_commit=off -c full_page_writes=off)
          echo "started db: ${DBID}"
          echo "DBID=$DBID" >> $GITHUB_ENV
          DBIP=$(docker inspect -f {{.NetworkSettings.IPAddress}} ${DBID})
          echo "found db ip: ${DBIP}"
          echo "DBIP=${DBIP}" >> $GITHUB_ENV
      - name: prepare-backend
        id: prepare_backend
        working-directory: ./backend
        run: mvn quarkus:dev > ./events.log &
        env:
          # currently, we can find the db using the host ip and the random port it was assigned...
          # not ideal, but I'm still unsure as to how this custom network would be useful,
          # unless the whole job was run inside its own (new) container
          DB_HOST: ${{ env.DBIP }}
      - name: test-ui
        working-directory: ./ui
        run: npm run test:e2e
      - name: show-backend-logs
        working-directory: ./backend
        run: cat ./events.log
        if: failure() && steps.build.outputs.prepare_backend.exit_code == 0
      # upload cypress screenshots
      - name: Upload Screenshots
        uses: actions/upload-artifact@v2
        if: failure() && steps.build.outputs.prepare_backend.exit_code == 0
        with:
          name: cypress-screenshots
          path: ./ui/tests/screenshots
      # upload cypress videos
      # Test run video was always captured, so this action uses "always()" condition
      - name: Upload Videos
        uses: actions/upload-artifact@v2
        if: failure() && steps.build.outputs.prepare_backend.exit_code == 0
        with:
          name: cypress-videos
          path: ./ui/tests/videos
      - name: Create Fat Jar
        if: success() && github.ref	== 'refs/heads/main'
        run: |
          cd ./ui
          npm run build -- --mode ci
          mkdir -p ../backend/src/main/resources/META-INF/resources
          cp -r ./dist/* ../backend/src/main/resources/META-INF/resources
          cd ../backend
          mvn clean package -DskipTests=true
      - name: Build Docker Image
        if: success() && github.ref	== 'refs/heads/main'
        run: docker build -t events:latest .
      - name: Push Docker Image
        if: success() && github.ref	== 'refs/heads/main'
        run: |
          echo "NOT image pushing to GHCR"
          # docker login ghcr.io -u ${REGISTRY_USER} -p ${REGISTRY_PASS}
          # docker tag events:latest ghcr.io/cytechmobile/events:latest
          # docker push ghcr.io/cytechmobile/events:latest
          # cleanup after pushing
          docker rmi events:latest
          # docker rmi ghcr.io/cytechmobile/events:latest
      - name: Stop Test DB
        if: always()
        run: |
          if [[ -n "${DBID}" ]]; then
            docker rm -f "${DBID}"
          fi
      - name: AutoMerge Dependabot PRs
        if: success() && github.actor == 'dependabot[bot]' && github.ref != 'refs/heads/main'
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          echo "found successful dependabot PR at ${PR_URL}, merging it"
          gh pr merge --auto --merge "$PR_URL"
      - name: Google Chat Notification
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Staging Build
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: ${{ job.status }}
        if: always()
        # this allows the build to succeed even when the notification fails (e.g. due to dependabot push, which does not have the secret)
        continue-on-error: true


